package com.github.kiarahmani.replayer;

import java.sql.Connection;
import java.sql.Driver;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import java.util.Random;
import java.util.concurrent.ThreadLocalRandom;

import com.github.adejanovski.cassandra.jdbc.CassandraConnection;

public class Client {
	private Connection connect = null;
	private Statement stmt = null;
	private ResultSet rs = null;
	private int id;
	Properties p;

	public Client(int id) {
		this.id = id;
		p = new Properties();
		p.setProperty("id", String.valueOf(this.id));
		Object o;
		try {
			o = Class.forName("MyDriver").newInstance();
			DriverManager.registerDriver((Driver) o);
			Driver driver = DriverManager.getDriver("jdbc:mydriver://");
			connect = driver.connect("", p);
		} catch (InstantiationException | IllegalAccessException | ClassNotFoundException | SQLException e) {
			e.printStackTrace();
		}
	}

	private void close() {
		try {
			connect.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	private String delivGetOrderIdSQL = 
			"SELECT NO_O_ID FROM " + "NEW_ORDER" + 
			" WHERE NO_D_ID = ? " +
			"   AND NO_W_ID = ? " +
			" ORDER BY NO_O_ID ASC " +
			" LIMIT 1";
	
	private String delivDeleteNewOrderSQL = 
			"DELETE FROM " + "NEW_ORDER" +
			" WHERE NO_O_ID = ? " +
			"   AND NO_D_ID = ?" +
			"   AND NO_W_ID = ?";
	
	private String delivGetCustIdSQL = 
			"SELECT O_C_ID FROM " + "OORDER" + 
			" WHERE O_ID = ? " +
			"   AND O_D_ID = ? " +
			"   AND O_W_ID = ?";
	
	private String delivUpdateCarrierIdSQL = 
			"UPDATE " + "OORDER" + 
			"   SET O_CARRIER_ID = ? " +
			" WHERE O_ID = ? " +
			"   AND O_D_ID = ?" +
			"   AND O_W_ID = ?";
	
	private String delivUpdateDeliveryDateSQL = 
			"UPDATE " + "ORDER_LINE" +
			"   SET OL_DELIVERY_D = ? " +
			" WHERE OL_O_ID = ? " +
			"   AND OL_D_ID = ? " +
			"   AND OL_W_ID = ? ";
	
	private String delivSumOrderAmountSQL = 
			"SELECT SUM(OL_AMOUNT) AS OL_TOTAL " +
			"  FROM " + "ORDER_LINE" + 
			" WHERE OL_O_ID = ? " +
			"   AND OL_D_ID = ? " +
			"   AND OL_W_ID = ?";
	
	private String delivUpdateCustBalDelivCntSQL = 
			"UPDATE " + "CUSTOMER" +
			"   SET C_BALANCE = ?," +
			"       C_DELIVERY_CNT = ? " +
			" WHERE C_W_ID = ? " +
			"   AND C_D_ID = ? " +
			"   AND C_ID = ? ";

	public void new_order_ops(int d_id, int w_id) throws SQLException {
		
		PreparedStatement delivGetOrderId = connect.prepareStatement(delivGetOrderIdSQL);
	
		delivGetOrderId.setInt(1, d_id);
		delivGetOrderId.setInt(2, w_id);

		ResultSet rs = delivGetOrderId.executeQuery();

		if (!rs.next()) {
			System.out.println("Empty");
		}

		int no_o_id = rs.getInt("NO_O_ID");
		rs.close();
		rs = null;

		PreparedStatement delivDeleteNewOrder =  connect.prepareStatement(delivDeleteNewOrderSQL);
		delivDeleteNewOrder.setInt(1, no_o_id);
		delivDeleteNewOrder.setInt(2, d_id);
		delivDeleteNewOrder.setInt(3, w_id);

		int result = delivDeleteNewOrder.executeUpdate();
	}

	public void o_order_ops(int d_id, int w_id, int no_o_id) throws SQLException {

		PreparedStatement delivGetCustId = connect.prepareStatement(delivGetCustIdSQL);
		delivGetCustId.setInt(1, no_o_id);
		delivGetCustId.setInt(2, d_id);
		delivGetCustId.setInt(3, w_id);

		ResultSet rs = delivGetCustId.executeQuery();

		if (!rs.next()) {
			System.out.println("Empty");
		}

		int c_id = rs.getInt("O_C_ID");
		rs.close();

		PreparedStatement delivUpdateCarrierId = connect.prepareStatement(delivUpdateCarrierIdSQL);
		int o_carrier_id = ThreadLocalRandom.current().nextInt(1, 10);
		delivUpdateCarrierId.setInt(1, o_carrier_id);
		delivUpdateCarrierId.setInt(2, no_o_id);
		delivUpdateCarrierId.setInt(3, d_id);
		delivUpdateCarrierId.setInt(4, w_id);

		int result = delivUpdateCarrierId.executeUpdate();
	}

	public void order_line_ops(int d_id, int w_id, int no_o_id) throws SQLException {

		PreparedStatement delivUpdateDeliveryDate = connect.prepareStatement(delivUpdateDeliveryDateSQL);
		Timestamp timestamp = new java.sql.Timestamp(System.currentTimeMillis());
		delivUpdateDeliveryDate.setTimestamp(1, timestamp);
		delivUpdateDeliveryDate.setInt(2, no_o_id);
		delivUpdateDeliveryDate.setInt(3, d_id);
		delivUpdateDeliveryDate.setInt(4, w_id);

		int result = delivUpdateDeliveryDate.executeUpdate();

		PreparedStatement delivSumOrderAmount = connect.prepareStatement(delivSumOrderAmountSQL);
		delivSumOrderAmount.setInt(1, no_o_id);
		delivSumOrderAmount.setInt(2, d_id);
		delivSumOrderAmount.setInt(3, w_id);

		ResultSet rs = delivSumOrderAmount.executeQuery();

		if (!rs.next()) {
			System.out.println("Empty");
		}

		float ol_total = rs.getFloat("OL_TOTAL");
		rs.close();
	}

	public void customer_ops(int d_id, int w_id, int c_id, float ol_total, int C_BALANCE, int C_DELIVERY_CNT) throws SQLException {

		PreparedStatement delivUpdateCustBalDelivCnt = connect.prepareStatement(delivUpdateCustBalDelivCntSQL);
		int idx = 1; // HACK: So that we can debug this query
		delivUpdateCustBalDelivCnt.setDouble(idx++, C_BALANCE + ol_total);
		delivUpdateCustBalDelivCnt.setInt(idx++, C_DELIVERY_CNT + 1);
		delivUpdateCustBalDelivCnt.setInt(idx++, w_id);
		delivUpdateCustBalDelivCnt.setInt(idx++, d_id);
		delivUpdateCustBalDelivCnt.setInt(idx++, c_id);

		int result = delivUpdateCustBalDelivCnt.executeUpdate();
	}
}