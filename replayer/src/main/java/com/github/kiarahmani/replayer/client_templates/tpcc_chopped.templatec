package com.github.kiarahmani.replayer;

import java.sql.Connection;
import java.sql.Driver;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import java.util.Random;

import com.github.adejanovski.cassandra.jdbc.CassandraConnection;

public class Client {
	private Connection connect = null;
	private Statement stmt = null;
	private ResultSet rs = null;
	private int id;
	Properties p;
	private Random r;

	public Client(int id) {
		this.id = id;
		p = new Properties();
		p.setProperty("id", String.valueOf(this.id));
		Object o;
		try {
			o = Class.forName("MyDriver").newInstance();
			DriverManager.registerDriver((Driver) o);
			Driver driver = DriverManager.getDriver("jdbc:mydriver://");
			connect = driver.connect("", p);
		} catch (InstantiationException | IllegalAccessException | ClassNotFoundException | SQLException e) {
			e.printStackTrace();
		}

		r = new Random();
	}

	private void close() {
		try {
			connect.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void delivery(int d_id, int w_id, int C_DELIVERY_CNT, int C_BALANCE) throws SQLException {

		Timestamp timestamp = new Timestamp(System.currentTimeMillis());
		
		String delivGetOrderIdSQL = 
				"SELECT NO_O_ID FROM " + "NEW_ORDER" + 
				" WHERE NO_D_ID = ? " +
				"   AND NO_W_ID = ? " +
				" ORDER BY NO_O_ID ASC " +
				" LIMIT 1";
		
		String delivDeleteNewOrderSQL = 
				"DELETE FROM " + "NEW_ORDER" +
				" WHERE NO_O_ID = ? " +
				"   AND NO_D_ID = ?" +
				"   AND NO_W_ID = ?";
		
		String delivGetCustIdSQL = 
				"SELECT O_C_ID FROM " + "OORDER" + 
				" WHERE O_ID = ? " +
				"   AND O_D_ID = ? " +
				"   AND O_W_ID = ?";
		
		String delivUpdateCarrierIdSQL = 
				"UPDATE " + "OORDER" + 
				"   SET O_CARRIER_ID = ? " +
				" WHERE O_ID = ? " +
				"   AND O_D_ID = ?" +
				"   AND O_W_ID = ?";
		
		String delivUpdateDeliveryDateSQL = 
				"UPDATE " + "ORDER_LINE" +
				"   SET OL_DELIVERY_D = ? " +
				" WHERE OL_O_ID = ? " +
				"   AND OL_D_ID = ? " +
				"   AND OL_W_ID = ? ";
		
		String delivSumOrderAmountSQL = 
				"SELECT SUM(OL_AMOUNT) AS OL_TOTAL " +
				"  FROM " + "ORDER_LINE" + 
				" WHERE OL_O_ID = ? " +
				"   AND OL_D_ID = ? " +
				"   AND OL_W_ID = ?";
		
		String delivUpdateCustBalDelivCntSQL = 
				"UPDATE " + "CUSTOMER" +
				"   SET C_BALANCE = ?," +
				"       C_DELIVERY_CNT = ? " +
				" WHERE C_W_ID = ? " +
				"   AND C_D_ID = ? " +
				"   AND C_ID = ? ";

		
		PreparedStatement delivGetOrderId = connect.prepareStatement(delivGetOrderIdSQL);
		PreparedStatement delivDeleteNewOrder =  connect.prepareStatement(delivDeleteNewOrderSQL);
		PreparedStatement delivGetCustId = connect.prepareStatement(delivGetCustIdSQL);
		PreparedStatement delivUpdateCarrierId = connect.prepareStatement(delivUpdateCarrierIdSQL);
		PreparedStatement delivUpdateDeliveryDate = connect.prepareStatement(delivUpdateDeliveryDateSQL);
		PreparedStatement delivSumOrderAmount = connect.prepareStatement(delivSumOrderAmountSQL);
		PreparedStatement delivUpdateCustBalDelivCnt = connect.prepareStatement(delivUpdateCustBalDelivCntSQL);
	
		delivGetOrderId.setInt(1, d_id);
		delivGetOrderId.setInt(2, w_id);

		ResultSet rs = delivGetOrderId.executeQuery();

		if (!rs.next()) {
			System.out.println("Empty");
		}

		int no_o_id = rs.getInt("NO_O_ID");
		rs.close();
		rs = null;

		delivDeleteNewOrder.setInt(1, no_o_id);
		delivDeleteNewOrder.setInt(2, d_id);
		delivDeleteNewOrder.setInt(3, w_id);

		int result = delivDeleteNewOrder.executeUpdate();

		delivGetCustId.setInt(1, no_o_id);
		delivGetCustId.setInt(2, d_id);
		delivGetCustId.setInt(3, w_id);

		rs = delivGetCustId.executeQuery();

		if (!rs.next()) {
			System.out.println("Empty");
		}

		int c_id = rs.getInt("O_C_ID");
		rs.close();

		int o_carrier_id = r.nextInt(10) + 1; // 1-10
		delivUpdateCarrierId.setInt(1, o_carrier_id);
		delivUpdateCarrierId.setInt(2, no_o_id);
		delivUpdateCarrierId.setInt(3, d_id);
		delivUpdateCarrierId.setInt(4, w_id);

		result = delivUpdateCarrierId.executeUpdate();

		delivUpdateDeliveryDate.setTimestamp(1, timestamp);
		delivUpdateDeliveryDate.setInt(2, no_o_id);
		delivUpdateDeliveryDate.setInt(3, d_id);
		delivUpdateDeliveryDate.setInt(4, w_id);

		result = delivUpdateDeliveryDate.executeUpdate();

		delivSumOrderAmount.setInt(1, no_o_id);
		delivSumOrderAmount.setInt(2, d_id);
		delivSumOrderAmount.setInt(3, w_id);

		rs = delivSumOrderAmount.executeQuery();

		if (!rs.next()) {
			System.out.println("Empty");
		}

		float ol_total = rs.getFloat("OL_TOTAL");
		rs.close();

		delivUpdateCustBalDelivCnt.setDouble(1, C_BALANCE + ol_total);
		delivUpdateCustBalDelivCnt.setInt(2, C_DELIVERY_CNT + 1);
		delivUpdateCustBalDelivCnt.setInt(3, w_id);
		delivUpdateCustBalDelivCnt.setInt(4, d_id);
		delivUpdateCustBalDelivCnt.setInt(5, c_id);

		result = delivUpdateCustBalDelivCnt.executeUpdate();
	}

	public void newOrder(int terminalWarehouseID, int numWarehouses,
			int terminalDistrictLowerID, int terminalDistrictUpperID,
			int w_id, int d_id, int c_id,
			int o_ol_cnt, int o_all_local) throws SQLException {
		String stmtGetCustSQL = 
				"SELECT C_DISCOUNT, C_LAST, C_CREDIT" +
				"  FROM " + "CUSTOMER" + 
				" WHERE C_W_ID = ? " + 
				"   AND C_D_ID = ? " +
				"   AND C_ID = ?";

		String stmtGetWhseSQL = 
				"SELECT W_TAX " + 
				"  FROM " + "WAREHOUSE" + 
				" WHERE W_ID = ?";
		
		String stmtGetDistSQL = 
				"SELECT D_NEXT_O_ID, D_TAX " +
				"  FROM " + "DISTRICT" +
				" WHERE D_W_ID = ? AND D_ID = ? FOR UPDATE";

		String stmtInsertNewOrderSQL = 
				"INSERT INTO " + "NEW_ORDER" +
				" (NO_O_ID, NO_D_ID, NO_W_ID) " +
				" VALUES ( ?, ?, ?)";

		String stmtUpdateDistSQL = 
				"UPDATE " + "DISTRICT" + 
				"   SET D_NEXT_O_ID = D_NEXT_O_ID + 1 " +
				" WHERE D_W_ID = ? " +
				"   AND D_ID = ?";

		String stmtInsertOOrderSQL = 
				"INSERT INTO " + "OORDER" + 
				" (O_ID, O_D_ID, O_W_ID, O_C_ID, O_ENTRY_D, O_OL_CNT, O_ALL_LOCAL)" + 
				" VALUES (?, ?, ?, ?, ?, ?, ?)";

		String stmtGetItemSQL = 
				"SELECT I_PRICE, I_NAME , I_DATA " +
				"  FROM " + "ITEM" + 
				" WHERE I_ID = ?";

		String stmtGetStockSQL = 
				"SELECT S_QUANTITY, S_DATA, S_DIST_01, S_DIST_02, S_DIST_03, S_DIST_04, S_DIST_05, " +
				"       S_DIST_06, S_DIST_07, S_DIST_08, S_DIST_09, S_DIST_10" +
				"  FROM " + "STOCK" + 
				" WHERE S_I_ID = ? " +
				"   AND S_W_ID = ? FOR UPDATE";

		String stmtUpdateStockSQL = 
				"UPDATE " + "STOCK" + 
				"   SET S_QUANTITY = ? , " +
				"       S_YTD = S_YTD + ?, " + 
				"       S_ORDER_CNT = S_ORDER_CNT + 1, " +
				"       S_REMOTE_CNT = S_REMOTE_CNT + ? " +
				" WHERE S_I_ID = ? " +
				"   AND S_W_ID = ?";

		String stmtInsertOrderLineSQL = 
				"INSERT INTO " + "ORDER_LINE" + 
				" (OL_O_ID, OL_D_ID, OL_W_ID, OL_NUMBER, OL_I_ID, OL_SUPPLY_W_ID, OL_QUANTITY, OL_AMOUNT, OL_DIST_INFO) " +
				" VALUES (?,?,?,?,?,?,?,?,?)";

		PreparedStatement stmtGetCust=connect.prepareStatement(stmtGetCustSQL);
		PreparedStatement stmtGetWhse=connect.prepareStatement(stmtGetWhseSQL);
		PreparedStatement stmtGetDist=connect.prepareStatement(stmtGetDistSQL);
		PreparedStatement stmtInsertNewOrder=connect.prepareStatement(stmtInsertNewOrderSQL);
		PreparedStatement stmtUpdateDist =connect.prepareStatement(stmtUpdateDistSQL);
		PreparedStatement stmtInsertOOrder =connect.prepareStatement(stmtInsertOOrderSQL);
		PreparedStatement stmtGetItem =connect.prepareStatement(stmtGetItemSQL);
		PreparedStatement stmtGetStock =connect.prepareStatement(stmtGetStockSQL);
		PreparedStatement stmtUpdateStock =connect.prepareStatement(stmtUpdateStockSQL);
		PreparedStatement stmtInsertOrderLine =connect.prepareStatement(stmtInsertOrderLineSQL);

		int districtID = r.nextInt(terminalDistrictUpperID-terminalDistrictLowerID) + terminalDistrictLowerID;
		int customerID = r.nextInt(3000) + 1; // 1-3000
		
		int numItems = r.nextInt(10) + 5; // 5-15
		int[] itemIDs = new int[numItems];
		int[] supplierWarehouseIDs = new int[numItems];
		int[] orderQuantities = new int[numItems];
		int allLocal = 1;

		for (int i = 0; i < numItems; i++) {
			itemIDs[i] = r.nextInt(100000) + 1; // 1-100000
			if (r.nextInt(100) + 1 > 1) {
				supplierWarehouseIDs[i] = terminalWarehouseID;
			} else {
				do {
					supplierWarehouseIDs[i] = r.nextInt(numWarehouses) + 1;
				} while (supplierWarehouseIDs[i] == terminalWarehouseID
						&& numWarehouses > 1);
				allLocal = 0;
			}
			orderQuantities[i] = r.nextInt(10) + 1; // 1-10
		}
		
		float c_discount, w_tax, d_tax = 0, i_price;
		int d_next_o_id, o_id = -1, s_quantity;
		String c_last = null, c_credit = null, i_name, i_data, s_data;
		String s_dist_01, s_dist_02, s_dist_03, s_dist_04, s_dist_05;
		String s_dist_06, s_dist_07, s_dist_08, s_dist_09, s_dist_10, ol_dist_info = null;
		float[] itemPrices = new float[o_ol_cnt];
		float[] orderLineAmounts = new float[o_ol_cnt];
		String[] itemNames = new String[o_ol_cnt];
		int[] stockQuantities = new int[o_ol_cnt];
		char[] brandGeneric = new char[o_ol_cnt];
		int ol_supply_w_id, ol_i_id, ol_quantity;
		int s_remote_cnt_increment;
		float ol_amount, total_amount = 0;
		
		stmtGetCust.setInt(1, w_id);
		stmtGetCust.setInt(2, d_id);
		stmtGetCust.setInt(3, c_id);
		ResultSet rs = stmtGetCust.executeQuery();
		if (!rs.next())
			throw new RuntimeException("C_D_ID=" + d_id
					+ " C_ID=" + c_id + " not found!");
		c_discount = rs.getFloat("C_DISCOUNT");
		c_last = rs.getString("C_LAST");
		c_credit = rs.getString("C_CREDIT");
		rs.close();
		rs = null;

		stmtGetWhse.setInt(1, w_id);
		rs = stmtGetWhse.executeQuery();
		if (!rs.next())
			throw new RuntimeException("W_ID=" + w_id + " not found!");
		w_tax = rs.getFloat("W_TAX");
		rs.close();
		rs = null;

		stmtGetDist.setInt(1, w_id);
		stmtGetDist.setInt(2, d_id);
		rs = stmtGetDist.executeQuery();
		if (!rs.next()) {
			throw new RuntimeException("D_ID=" + d_id + " D_W_ID=" + w_id
					+ " not found!");
		}
		d_next_o_id = rs.getInt("D_NEXT_O_ID");
		d_tax = rs.getFloat("D_TAX");
		rs.close();
		rs = null;

		stmtUpdateDist.setInt(1, w_id);
		stmtUpdateDist.setInt(2, d_id);
		int result = stmtUpdateDist.executeUpdate();
		if (result == 0)
			throw new RuntimeException(
					"Error!! Cannot update next_order_id on district for D_ID="
							+ d_id + " D_W_ID=" + w_id);

		o_id = d_next_o_id;

		stmtInsertOOrder.setInt(1, o_id);
		stmtInsertOOrder.setInt(2, d_id);
		stmtInsertOOrder.setInt(3, w_id);
		stmtInsertOOrder.setInt(4, c_id);
		stmtInsertOOrder.setTimestamp(5, new Timestamp(System.currentTimeMillis()));
		stmtInsertOOrder.setInt(6, o_ol_cnt);
		stmtInsertOOrder.setInt(7, o_all_local);
		stmtInsertOOrder.executeUpdate();

		stmtInsertNewOrder.setInt(1, o_id);
		stmtInsertNewOrder.setInt(2, d_id);
		stmtInsertNewOrder.setInt(3, w_id);
		stmtInsertNewOrder.executeUpdate();

		for (int ol_number = 1; ol_number <= o_ol_cnt; ol_number++) {
			ol_supply_w_id = supplierWarehouseIDs[ol_number - 1];
			ol_i_id = itemIDs[ol_number - 1];
			ol_quantity = orderQuantities[ol_number - 1];
			stmtGetItem.setInt(1, ol_i_id);
			rs = stmtGetItem.executeQuery();
			if (!rs.next()) {
				// This is (hopefully) an expected error: this is an
				// expected new order rollback
				assert ol_number == o_ol_cnt;
				assert ol_i_id == -12345;
				rs.close();
			}

			i_price = rs.getFloat("I_PRICE");
			i_name = rs.getString("I_NAME");
			i_data = rs.getString("I_DATA");
			rs.close();
			rs = null;

			itemPrices[ol_number - 1] = i_price;
			itemNames[ol_number - 1] = i_name;


			stmtGetStock.setInt(1, ol_i_id);
			stmtGetStock.setInt(2, ol_supply_w_id);
			rs = stmtGetStock.executeQuery();
			if (!rs.next())
				throw new RuntimeException("I_ID=" + ol_i_id
						+ " not found!");
			s_quantity = rs.getInt("S_QUANTITY");
			s_data = rs.getString("S_DATA");
			s_dist_01 = rs.getString("S_DIST_01");
			s_dist_02 = rs.getString("S_DIST_02");
			s_dist_03 = rs.getString("S_DIST_03");
			s_dist_04 = rs.getString("S_DIST_04");
			s_dist_05 = rs.getString("S_DIST_05");
			s_dist_06 = rs.getString("S_DIST_06");
			s_dist_07 = rs.getString("S_DIST_07");
			s_dist_08 = rs.getString("S_DIST_08");
			s_dist_09 = rs.getString("S_DIST_09");
			s_dist_10 = rs.getString("S_DIST_10");
			rs.close();
			rs = null;

			stockQuantities[ol_number - 1] = s_quantity;

			if (s_quantity - ol_quantity >= 10) {
				s_quantity -= ol_quantity;
			} else {
				s_quantity += -ol_quantity + 91;
			}

			if (ol_supply_w_id == w_id) {
				s_remote_cnt_increment = 0;
			} else {
				s_remote_cnt_increment = 1;
			}


			stmtUpdateStock.setInt(1, s_quantity);
			stmtUpdateStock.setInt(2, ol_quantity);
			stmtUpdateStock.setInt(3, s_remote_cnt_increment);
			stmtUpdateStock.setInt(4, ol_i_id);
			stmtUpdateStock.setInt(5, ol_supply_w_id);
			stmtUpdateStock.addBatch();

			ol_amount = ol_quantity * i_price;
			orderLineAmounts[ol_number - 1] = ol_amount;
			total_amount += ol_amount;

			if (i_data.indexOf("ORIGINAL") != -1
					&& s_data.indexOf("ORIGINAL") != -1) {
				brandGeneric[ol_number - 1] = 'B';
			} else {
				brandGeneric[ol_number - 1] = 'G';
			}

			switch ((int) d_id) {
			case 1:
				ol_dist_info = s_dist_01;
				break;
			case 2:
				ol_dist_info = s_dist_02;
				break;
			case 3:
				ol_dist_info = s_dist_03;
				break;
			case 4:
				ol_dist_info = s_dist_04;
				break;
			case 5:
				ol_dist_info = s_dist_05;
				break;
			case 6:
				ol_dist_info = s_dist_06;
				break;
			case 7:
				ol_dist_info = s_dist_07;
				break;
			case 8:
				ol_dist_info = s_dist_08;
				break;
			case 9:
				ol_dist_info = s_dist_09;
				break;
			case 10:
				ol_dist_info = s_dist_10;
				break;
			}

			stmtInsertOrderLine.setInt(1, o_id);
			stmtInsertOrderLine.setInt(2, d_id);
			stmtInsertOrderLine.setInt(3, w_id);
			stmtInsertOrderLine.setInt(4, ol_number);
			stmtInsertOrderLine.setInt(5, ol_i_id);
			stmtInsertOrderLine.setInt(6, ol_supply_w_id);
			stmtInsertOrderLine.setInt(7, ol_quantity);
			stmtInsertOrderLine.setDouble(8, ol_amount);
			stmtInsertOrderLine.setString(9, ol_dist_info);
			stmtInsertOrderLine.addBatch();

		} // end-for

		stmtInsertOrderLine.executeBatch();
		stmtUpdateStock.executeBatch();

		total_amount *= (1 + w_tax + d_tax) * (1 - c_discount);

		if (stmtInsertOrderLine != null)
			stmtInsertOrderLine.clearBatch();
		if (stmtUpdateStock != null)
			stmtUpdateStock.clearBatch();
	}
}