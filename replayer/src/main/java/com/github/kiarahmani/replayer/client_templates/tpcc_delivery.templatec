package com.github.kiarahmani.replayer;

import java.sql.Connection;
import java.sql.Driver;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import java.util.Random;
import java.util.concurrent.ThreadLocalRandom;

import com.github.adejanovski.cassandra.jdbc.CassandraConnection;

public class Client {
	private Connection connect = null;
	private Statement stmt = null;
	private ResultSet rs = null;
	private int id;
	Properties p;

	public Client(int id) {
		this.id = id;
		p = new Properties();
		p.setProperty("id", String.valueOf(this.id));
		Object o;
		try {
			o = Class.forName("MyDriver").newInstance();
			DriverManager.registerDriver((Driver) o);
			Driver driver = DriverManager.getDriver("jdbc:mydriver://");
			connect = driver.connect("", p);
		} catch (InstantiationException | IllegalAccessException | ClassNotFoundException | SQLException e) {
			e.printStackTrace();
		}
	}

	private void close() {
		try {
			connect.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void delivery(int w_id) throws SQLException {

		int o_carrier_id = ThreadLocalRandom.current().nextInt(1, 10);
		Timestamp timestamp = new java.sql.Timestamp(System.currentTimeMillis());
		
		String delivGetOrderIdSQL = 
				"SELECT NO_O_ID FROM " + "NEW_ORDER" + 
				" WHERE NO_D_ID = ? " +
				"   AND NO_W_ID = ? " +
				" ORDER BY NO_O_ID ASC " +
				" LIMIT 1";
		
		String delivDeleteNewOrderSQL = 
				"DELETE FROM " + "NEW_ORDER" +
				" WHERE NO_O_ID = ? " +
				"   AND NO_D_ID = ?" +
				"   AND NO_W_ID = ?";
		
		String delivGetCustIdSQL = 
				"SELECT O_C_ID FROM " + "OORDER" + 
				" WHERE O_ID = ? " +
				"   AND O_D_ID = ? " +
				"   AND O_W_ID = ?";
		
		String delivUpdateCarrierIdSQL = 
				"UPDATE " + "OORDER" + 
				"   SET O_CARRIER_ID = ? " +
				" WHERE O_ID = ? " +
				"   AND O_D_ID = ?" +
				"   AND O_W_ID = ?";
		
		String delivUpdateDeliveryDateSQL = 
				"UPDATE " + "ORDER_LINE" +
				"   SET OL_DELIVERY_D = ? " +
				" WHERE OL_O_ID = ? " +
				"   AND OL_D_ID = ? " +
				"   AND OL_W_ID = ? ";
		
		String delivSumOrderAmountSQL = 
				"SELECT SUM(OL_AMOUNT) AS OL_TOTAL " +
				"  FROM " + "ORDER_LINE" + 
				" WHERE OL_O_ID = ? " +
				"   AND OL_D_ID = ? " +
				"   AND OL_W_ID = ?";
		
		String delivUpdateCustBalDelivCntSQL = 
				"UPDATE " + "CUSTOMER" +
				"   SET C_BALANCE = C_BALANCE + ?," +
				"       C_DELIVERY_CNT = C_DELIVERY_CNT + 1 " +
				" WHERE C_W_ID = ? " +
				"   AND C_D_ID = ? " +
				"   AND C_ID = ? ";

		PreparedStatement delivGetOrderId = connect.prepareStatement(delivGetOrderIdSQL);
		PreparedStatement delivDeleteNewOrder =  connect.prepareStatement(delivDeleteNewOrderSQL);
		PreparedStatement delivGetCustId = connect.prepareStatement(delivGetCustIdSQL);
		PreparedStatement delivUpdateCarrierId = connect.prepareStatement(delivUpdateCarrierIdSQL);
		PreparedStatement delivUpdateDeliveryDate = connect.prepareStatement(delivUpdateDeliveryDateSQL);
		PreparedStatement delivSumOrderAmount = connect.prepareStatement(delivSumOrderAmountSQL);
		PreparedStatement delivUpdateCustBalDelivCnt = connect.prepareStatement(delivUpdateCustBalDelivCntSQL);
	
		int d_id, c_id;
		float ol_total = 0;
        int[] orderIDs;

        orderIDs = new int[10];
        for (d_id = 1; d_id <= 10; d_id++) {
            delivGetOrderId.setInt(1, d_id);
            delivGetOrderId.setInt(2, w_id);

            ResultSet rs = delivGetOrderId.executeQuery();

            int no_o_id = rs.getInt("NO_O_ID");
            orderIDs[d_id - 1] = no_o_id;
            rs.close();
            rs = null;

            delivDeleteNewOrder.setInt(1, no_o_id);
            delivDeleteNewOrder.setInt(2, d_id);
            delivDeleteNewOrder.setInt(3, w_id);

            int result = delivDeleteNewOrder.executeUpdate();

            delivGetCustId.setInt(1, no_o_id);
            delivGetCustId.setInt(2, d_id);
            delivGetCustId.setInt(3, w_id);

            rs = delivGetCustId.executeQuery();

            c_id = rs.getInt("O_C_ID");
            rs.close();

            delivUpdateCarrierId.setInt(1, o_carrier_id);
            delivUpdateCarrierId.setInt(2, no_o_id);
            delivUpdateCarrierId.setInt(3, d_id);
            delivUpdateCarrierId.setInt(4, w_id);

            result = delivUpdateCarrierId.executeUpdate();

            delivUpdateDeliveryDate.setTimestamp(1, timestamp);
            delivUpdateDeliveryDate.setInt(2, no_o_id);
            delivUpdateDeliveryDate.setInt(3, d_id);
            delivUpdateDeliveryDate.setInt(4, w_id);

            result = delivUpdateDeliveryDate.executeUpdate();

            delivSumOrderAmount.setInt(1, no_o_id);
            delivSumOrderAmount.setInt(2, d_id);
            delivSumOrderAmount.setInt(3, w_id);

            rs = delivSumOrderAmount.executeQuery();

            ol_total = rs.getFloat("OL_TOTAL");
            rs.close();

            int idx = 1; // HACK: So that we can debug this query
            delivUpdateCustBalDelivCnt.setDouble(idx++, ol_total);
            delivUpdateCustBalDelivCnt.setInt(idx++, w_id);
            delivUpdateCustBalDelivCnt.setInt(idx++, d_id);
            delivUpdateCustBalDelivCnt.setInt(idx++, c_id);

            result = delivUpdateCustBalDelivCnt.executeUpdate();
        }
	}
}