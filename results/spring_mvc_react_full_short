
     [java] [questionCreateQuestion_1, questionCreateQuestion_3, tagGetTag_0]: 3/58
     [java] [answerCreateQuestion_0, answerCreateQuestion_2, userCreateUser_0, userDeleteUser_0]: 1/58
     [java] [answerCreateQuestion_0, answerCreateQuestion_2, userCreateUser_0, userUpdateUser_0]: 1/58
     [java] [questionCreateQuestion_1, questionCreateQuestion_3, tagGetTagsByTerm_0]: 3/58
     [java] [questionCreateQuestion_2, questionCreateQuestion_4, questionGetQuestionsByTag_1]: 1/58
     [java] [questionCreateQuestion_1, questionCreateQuestion_4, questionGetQuestionsByTag_0, questionGetQuestionsByTag_1]: 4/58
     [java] [questionCreateQuestion_1, questionCreateQuestion_3, questionGetQuestionsByTag_0]: 3/58
     [java] [questionCreateQuestion_1, questionCreateQuestion_3]: 24/58
     [java] [answerCreateQuestion_0, answerCreateQuestion_2, userCreateQuestion_0]: 2/58
     [java] [answerCreateQuestion_0, answerCreateQuestion_2, userCreateUser_0]: 1/58
     [java] [answerCreateQuestion_0, answerCreateQuestion_2, authorizationRegister_0, userCreateQuestion_0]: 1/58
     [java] [questionCreateQuestion_1, questionCreateQuestion_2, questionGetQuestionsByTag_0, questionGetQuestionsByTag_1]: 4/58
     [java] [questionCreateQuestion_1, questionCreateQuestion_3, tagListAllTags_0]: 3/58
     [java] [answerCreateQuestion_0, answerCreateQuestion_2, userCreateQuestion_0, userCreateUser_0]: 1/58
     [java] [answerCreateQuestion_0, answerCreateQuestion_2, userDeleteUser_0]: 1/58
     [java] [answerCreateQuestion_0, answerCreateQuestion_2, userUpdateUser_0]: 2/58
     [java] [answerCreateQuestion_0, answerCreateQuestion_2, authorizationRegister_0, userDeleteUser_0]: 1/58
     [java] [answerCreateQuestion_0, answerCreateQuestion_2, authorizationRegister_0]: 1/58
     [java] [answerCreateQuestion_0, answerCreateQuestion_2, authorizationRegister_0, userUpdateUser_0]: 1/58
     [java] answerCreateQuestion (answerCreateQuestion_0): 13/58
     [java] answerCreateQuestion (answerCreateQuestion_2): 13/58
     [java] authorizationRegister (authorizationRegister_0): 4/58
     [java] questionCreateQuestion (questionCreateQuestion_1): 44/58
     [java] questionCreateQuestion (questionCreateQuestion_2): 5/58
     [java] questionCreateQuestion (questionCreateQuestion_3): 36/58
     [java] questionCreateQuestion (questionCreateQuestion_4): 5/58
     [java] questionGetQuestionsByTag (questionGetQuestionsByTag_0): 11/58
     [java] questionGetQuestionsByTag (questionGetQuestionsByTag_1): 9/58
     [java] tagGetTag (tagGetTag_0): 3/58
     [java] tagGetTagsByTerm (tagGetTagsByTerm_0): 3/58
     [java] tagListAllTags (tagListAllTags_0): 3/58
     [java] userCreateQuestion (userCreateQuestion_0): 4/58
     [java] userCreateUser (userCreateUser_0): 4/58
     [java] userDeleteUser (userDeleteUser_0): 3/58
     [java] userUpdateUser (userUpdateUser_0): 4/58
     [java] ------------------------------------------------------
     [java]  			     Schema
     [java] ------------------------------------------------------
     [java] ##answers## <<id:INT>> <comment:STRING> <createdAt:STRING> <updatedAt:STRING> <userId:INT> <questionId:INT>
     [java] ##questions## <<id:INT>> <title:STRING> <ago:STRING> <comment:STRING> <userId:INT> <createdAt:STRING> <updatedAt:STRING>
     [java] ##question_tag## <<questionId:INT>> <<tagId:INT>>
     [java] ##tags## <<id:INT>> <name:STRING> <description:STRING> <popular:INT> <createdAt:STRING> <userId:INT>
     [java] ##users## <<id:INT>> <username:STRING> <password:STRING> <createdAt:STRING> <status:STRING> <popular:INT>
     [java] ##votes## <<id:INT>> <module:STRING> <questionId:INT> <answerId:INT> <userId:INT> <mark:STRING>
     [java] ------------------------------------------------------
     [java]  			Compiled Application
     [java] ------------------------------------------------------
     [java] TXN_answerListAllAnswers_0
     [java]  ++ answerListAllAnswers_0-select#1#1 (SELECT[answers:[id, comment, createdAt, updatedAt, userId, questionId]]  <<(EQ 1,1)>>)
     [java]     [PATH CONDITION: true]
     [java] Dependencies: <empty>
     [java] Original Transaction: answerListAllAnswers
     [java] Microservice: M1
     [java] ----------------------------------------------------------------
     [java] TXN_answerGetAnswer_0
     [java]  ++ answerGetAnswer_0-select#1#1 (SELECT[answers:[id, comment, createdAt, updatedAt, userId, questionId]]  <<(EQ answers.id,i0_param)>>)
     [java]     [PATH CONDITION: true]
     [java] Dependencies: <empty>
     [java] Original Transaction: answerGetAnswer
     [java] Microservice: M1
     [java] ----------------------------------------------------------------
     [java] TXN_answerGetAnswersByUser_0
     [java]  ++ answerGetAnswersByUser_0-select#1#1 (SELECT[users:[id, username, password, createdAt, status, popular]]  <<(EQ users.username,r1_param)>>)
     [java]     [PATH CONDITION: true]
     [java] Dependencies: <empty>
     [java] Original Transaction: answerGetAnswersByUser
     [java] Microservice: M4
     [java] ----------------------------------------------------------------
     [java] TXN_answerGetAnswersByUser_1
     [java]  ++ answerGetAnswersByUser_1-select#1#1 (SELECT[answers:[id, comment, createdAt, updatedAt, userId, questionId]]  <<(EQ answers.userId,(ROW:users-r5-next1).id)>>)
     [java]     [PATH CONDITION: true]
     [java] Dependencies: <empty>
     [java] Original Transaction: answerGetAnswersByUser
     [java] Microservice: M1
     [java] ----------------------------------------------------------------
     [java] TXN_answerCreateQuestion_0
     [java]  ++ answerCreateQuestion_0-select#1#1 (SELECT[users:[id, username, password, createdAt, status, popular]]  <<(EQ users.username,r1_param)>>)
     [java]     [PATH CONDITION: true]
     [java] Dependencies: <empty>
     [java] Original Transaction: answerCreateQuestion
     [java] Microservice: M4
     [java] ----------------------------------------------------------------
     [java] TXN_answerCreateQuestion_1
     [java]  ++ answerCreateQuestion_1-select#1#1 (SELECT[questions:[id, title, ago, comment, userId, createdAt, updatedAt]]  <<(EQ questions.id,i0_param)>>)
     [java]     [PATH CONDITION: true]
     [java] Dependencies: <empty>
     [java] Original Transaction: answerCreateQuestion
     [java] Microservice: M2
     [java] ----------------------------------------------------------------
     [java] TXN_answerCreateQuestion_2
     [java]  ++ answerCreateQuestion_2-select#1#1 (SELECT[users:[id, username, password, createdAt, status, popular]]  <<(EQ users.id,(ROW:questions-r11-next1).userId)>>)
     [java]     [PATH CONDITION: true]
     [java] Dependencies: <empty>
     [java] Original Transaction: answerCreateQuestion
     [java] Microservice: M4
     [java] ----------------------------------------------------------------
     [java] TXN_answerCreateQuestion_3
     [java]  ++ answerCreateQuestion_3-insert#1#1 (INSERT[answers] [i1_param, r2_param, r3_param, r3_param, (ROW:users-r9-next1).id, i0_param])
     [java]     [PATH CONDITION: true]
     [java] Dependencies: <empty>
     [java] Original Transaction: answerCreateQuestion
     [java] Microservice: M1
     [java] ----------------------------------------------------------------
     [java] TXN_authorizationLogin_0
     [java]  ++ authorizationLogin_0-select#1#1 (SELECT[users:[id, username, password, createdAt, status, popular]]  <<(EQ users.username,r1_param)>>)
     [java]     [PATH CONDITION: true]
     [java] Dependencies: <empty>
     [java] Original Transaction: authorizationLogin
     [java] Microservice: M4
     [java] ----------------------------------------------------------------
     [java] TXN_authorizationRegister_0
     [java]  ++ authorizationRegister_0-select#1#1 (SELECT[users:[id, username, password, createdAt, status, popular]]  <<(EQ users.username,r1_param)>>)
     [java]     [PATH CONDITION: true]
     [java]  ++ authorizationRegister_0-insert#1#2 (INSERT[users] [i0_param, r1_param, r2_param, r3_param, active, 0])
     [java]     [PATH CONDITION: true]
     [java] Dependencies: <empty>
     [java] Original Transaction: authorizationRegister
     [java] Microservice: M4
     [java] ----------------------------------------------------------------
     [java] TXN_questionListAllQuestions_0
     [java]  ++ questionListAllQuestions_0-select#1#1 (SELECT[questions:[id, title, ago, comment, userId, createdAt, updatedAt]]  <<(EQ 1,1)>>)
     [java]     [PATH CONDITION: true]
     [java] Dependencies: <empty>
     [java] Original Transaction: questionListAllQuestions
     [java] Microservice: M2
     [java] ----------------------------------------------------------------
     [java] TXN_questionGetQuestion_0
     [java]  ++ questionGetQuestion_0-select#1#1 (SELECT[questions:[id, title, ago, comment, userId, createdAt, updatedAt]]  <<(EQ questions.id,i0_param)>>)
     [java]     [PATH CONDITION: true]
     [java] Dependencies: <empty>
     [java] Original Transaction: questionGetQuestion
     [java] Microservice: M2
     [java] ----------------------------------------------------------------
     [java] TXN_questionGetQuestionsByUser_0
     [java]  ++ questionGetQuestionsByUser_0-select#1#1 (SELECT[users:[id, username, password, createdAt, status, popular]]  <<(EQ users.username,r1_param)>>)
     [java]     [PATH CONDITION: true]
     [java] Dependencies: <empty>
     [java] Original Transaction: questionGetQuestionsByUser
     [java] Microservice: M4
     [java] ----------------------------------------------------------------
     [java] TXN_questionGetQuestionsByUser_1
     [java]  ++ questionGetQuestionsByUser_1-select#1#1 (SELECT[questions:[id, title, ago, comment, userId, createdAt, updatedAt]]  <<(EQ questions.userId,(ROW:users-r5-next1).id)>>)
     [java]     [PATH CONDITION: true]
     [java] Dependencies: <empty>
     [java] Original Transaction: questionGetQuestionsByUser
     [java] Microservice: M2
     [java] ----------------------------------------------------------------
     [java] TXN_questionGetQuestionsByTag_0
     [java]  ++ questionGetQuestionsByTag_0-select#1#1 (SELECT[tags:[id, name, description, popular, createdAt, userId]]  <<(EQ tags.name,r1_param)>>)
     [java]     [PATH CONDITION: true]
     [java] Dependencies: <empty>
     [java] Original Transaction: questionGetQuestionsByTag
     [java] Microservice: M3
     [java] ----------------------------------------------------------------
     [java] TXN_questionGetQuestionsByTag_1
     [java]  ++ questionGetQuestionsByTag_1-select#1#1 (SELECT[question_tag:[questionId]]  <<(EQ question_tag.tagId,(ROW:tags-r6-next1).id)>>)
     [java]     [PATH CONDITION: true]
     [java]  ++ questionGetQuestionsByTag_1-select#2#2 (SELECT[questions:[id, title, ago, comment, userId, createdAt, updatedAt]]  <<(EQ questions.id,(ROW:question_tag-r8-loopVar0).questionId)>>)
     [java]     [PATH CONDITION: (AND (AND true,(NOT (EQ NULL[ROW SET: question_tag WHERE: (EQ question_tag.tagId,(ROW:tags-r6-next1).id)],0))),(NOT (EQ NULL[null],0)))]
     [java] Dependencies: <empty>
     [java] Original Transaction: questionGetQuestionsByTag
     [java] Microservice: M2
     [java] ----------------------------------------------------------------
     [java] TXN_questionCreateQuestion_0
     [java]  ++ questionCreateQuestion_0-select#1#1 (SELECT[users:[id, username, password, createdAt, status, popular]]  <<(EQ users.username,r1_param)>>)
     [java]     [PATH CONDITION: true]
     [java] Dependencies: <empty>
     [java] Original Transaction: questionCreateQuestion
     [java] Microservice: M4
     [java] ----------------------------------------------------------------
     [java] TXN_questionCreateQuestion_1
     [java]  ++ questionCreateQuestion_1-select#1#1 (SELECT[tags:[id, name, description, popular, createdAt, userId]]  <<(EQ tags.name,Abs-STRING#0)>>)
     [java]     [PATH CONDITION: (AND true,(NOT (GEQ 0,Abs-REAL#3)))]
     [java]  ++ questionCreateQuestion_1-update#1#2 (UPDATE[tags] {popular=(PLUS (ROW:users-r15-next1).popular,1)} <<(EQ tags.id,i7_param)>>)
     [java]     [PATH CONDITION: (AND true,(NOT (GEQ 0,Abs-REAL#3)))]
     [java]  ++ questionCreateQuestion_1-insert#1#3 (INSERT[tags] [i7_param, Abs-STRING#1, , 0, r4_param, (ROW:users-r15-next1).id])
     [java]     [PATH CONDITION: (AND true,(NOT (GEQ 0,Abs-REAL#4)))]
     [java] Dependencies: <empty>
     [java] Original Transaction: questionCreateQuestion
     [java] Microservice: M3
     [java] ----------------------------------------------------------------
     [java] TXN_questionCreateQuestion_2
     [java]  ++ questionCreateQuestion_2-insert#1#1 (INSERT[questions] [i0_param, r5_param, r6_param, r7_param, (ROW:users-r15-next1).id, r4_param, r4_param])
     [java]     [PATH CONDITION: true]
     [java] Dependencies: <empty>
     [java] Original Transaction: questionCreateQuestion
     [java] Microservice: M2
     [java] ----------------------------------------------------------------
     [java] TXN_questionCreateQuestion_3
     [java]  ++ questionCreateQuestion_3-select#1#1 (SELECT[tags:[id, name, description, popular, createdAt, userId]]  <<(EQ tags.name,Abs-STRING#2)>>)
     [java]     [PATH CONDITION: (AND true,(NOT (GEQ 0,Abs-REAL#5)))]
     [java] Dependencies: <empty>
     [java] Original Transaction: questionCreateQuestion
     [java] Microservice: M3
     [java] ----------------------------------------------------------------
     [java] TXN_questionCreateQuestion_4
     [java]  ++ questionCreateQuestion_4-insert#1#1 (INSERT[question_tag] [i0_param, (ROW:tags-r38-loopVar2).id])
     [java]     [PATH CONDITION: (AND true,(NOT (GEQ 0,Abs-REAL#5)))]
     [java] Dependencies: <empty>
     [java] Original Transaction: questionCreateQuestion
     [java] Microservice: M2
     [java] ----------------------------------------------------------------
     [java] TXN_tagListAllTags_0
     [java]  ++ tagListAllTags_0-select#1#1 (SELECT[tags:[id, name, description, popular, createdAt, userId]]  <<(EQ 1,1)>>)
     [java]     [PATH CONDITION: true]
     [java] Dependencies: <empty>
     [java] Original Transaction: tagListAllTags
     [java] Microservice: M3
     [java] ----------------------------------------------------------------
     [java] TXN_tagGetTag_0
     [java]  ++ tagGetTag_0-select#1#1 (SELECT[tags:[id, name, description, popular, createdAt, userId]]  <<(EQ tags.id,i0_param)>>)
     [java]     [PATH CONDITION: true]
     [java] Dependencies: <empty>
     [java] Original Transaction: tagGetTag
     [java] Microservice: M3
     [java] ----------------------------------------------------------------
     [java] TXN_tagGetTagsByTerm_0
     [java]  ++ tagGetTagsByTerm_0-select#1#1 (SELECT[tags:[id, name, description, popular, createdAt, userId]]  <<(EQ tags.name,r1_param)>>)
     [java]     [PATH CONDITION: true]
     [java] Dependencies: <empty>
     [java] Original Transaction: tagGetTagsByTerm
     [java] Microservice: M3
     [java] ----------------------------------------------------------------
     [java] TXN_userListAllUsers_0
     [java]  ++ userListAllUsers_0-select#1#1 (SELECT[users:[id, username, password, createdAt, status, popular]]  <<(EQ 1,1)>>)
     [java]     [PATH CONDITION: true]
     [java] Dependencies: <empty>
     [java] Original Transaction: userListAllUsers
     [java] Microservice: M4
     [java] ----------------------------------------------------------------
     [java] TXN_userGetUserByName_0
     [java]  ++ userGetUserByName_0-select#1#1 (SELECT[users:[id, username, password, createdAt, status, popular]]  <<(EQ users.username,r1_param)>>)
     [java]     [PATH CONDITION: true]
     [java] Dependencies: <empty>
     [java] Original Transaction: userGetUserByName
     [java] Microservice: M4
     [java] ----------------------------------------------------------------
     [java] TXN_userGetUser_0
     [java]  ++ userGetUser_0-select#1#1 (SELECT[users:[id, username, password, createdAt, status, popular]]  <<(EQ users.id,i0_param)>>)
     [java]     [PATH CONDITION: true]
     [java] Dependencies: <empty>
     [java] Original Transaction: userGetUser
     [java] Microservice: M4
     [java] ----------------------------------------------------------------
     [java] TXN_userCreateUser_0
     [java]  ++ userCreateUser_0-select#1#1 (SELECT[users:[id, username, password, createdAt, status, popular]]  <<(EQ users.username,r1_param)>>)
     [java]     [PATH CONDITION: true]
     [java]  ++ userCreateUser_0-insert#1#2 (INSERT[users] [i0_param, r1_param, r2_param, r3_param, r4_param, i1_param])
     [java]     [PATH CONDITION: true]
     [java] Dependencies: <empty>
     [java] Original Transaction: userCreateUser
     [java] Microservice: M4
     [java] ----------------------------------------------------------------
     [java] TXN_userCreateQuestion_0
     [java]  ++ userCreateQuestion_0-select#1#1 (SELECT[users:[id, username, password, createdAt, status, popular]]  <<(EQ users.username,r1_param)>>)
     [java]     [PATH CONDITION: true]
     [java]  ++ userCreateQuestion_0-update#1#2 (UPDATE[users] {password=r2_param} <<(EQ users.id,(ROW:users-r7-next1).id)>>)
     [java]     [PATH CONDITION: true]
     [java] Dependencies: <empty>
     [java] Original Transaction: userCreateQuestion
     [java] Microservice: M4
     [java] ----------------------------------------------------------------
     [java] TXN_userUpdateUser_0
     [java]  ++ userUpdateUser_0-select#1#1 (SELECT[users:[id, username, password, createdAt, status, popular]]  <<(EQ users.id,i0_param)>>)
     [java]     [PATH CONDITION: true]
     [java]  ++ userUpdateUser_0-update#1#2 (UPDATE[users] {username=r1_param, password=r2_param} <<(EQ users.id,i0_param)>>)
     [java]     [PATH CONDITION: true]
     [java] Dependencies: <empty>
     [java] Original Transaction: userUpdateUser
     [java] Microservice: M4
     [java] ----------------------------------------------------------------
     [java] TXN_userDeleteUser_0
     [java]  ++ userDeleteUser_0-select#1#1 (SELECT[users:[id, username, password, createdAt, status, popular]]  <<(EQ users.id,i0_param)>>)
     [java]     [PATH CONDITION: true]
     [java]  ++ userDeleteUser_0-delete#1#2 (DELETE[users] <<(EQ users.id,i0_param)>>)
     [java]     [PATH CONDITION: true]
     [java] Dependencies: <empty>
     [java] Original Transaction: userDeleteUser
     [java] Microservice: M4
     [java] ----------------------------------------------------------------
     [java] TXN_voteCreateQuestion_0
     [java]  ++ voteCreateQuestion_0-select#1#1 (SELECT[users:[id, username, password, createdAt, status, popular]]  <<(EQ users.username,r1_param)>>)
     [java]     [PATH CONDITION: true]
     [java] Dependencies: <empty>
     [java] Original Transaction: voteCreateQuestion
     [java] Microservice: M4
     [java] ----------------------------------------------------------------
     [java] TXN_voteCreateQuestion_1
     [java]  ++ voteCreateQuestion_1-select#1#1 (SELECT[questions:[id, title, ago, comment, userId, createdAt, updatedAt]]  <<(EQ questions.id,i0_param)>>)
     [java]     [PATH CONDITION: true]
     [java] Dependencies: <empty>
     [java] Original Transaction: voteCreateQuestion
     [java] Microservice: M2
     [java] ----------------------------------------------------------------
     [java] TXN_voteCreateQuestion_2
     [java]  ++ voteCreateQuestion_2-select#1#1 (SELECT[answers:[id, comment, createdAt, updatedAt, userId, questionId]]  <<(EQ answers.id,i1_param)>>)
     [java]     [PATH CONDITION: true]
     [java] Dependencies: <empty>
     [java] Original Transaction: voteCreateQuestion
     [java] Microservice: M1
     [java] ----------------------------------------------------------------
     [java] TXN_voteCreateQuestion_3
     [java]  ++ voteCreateQuestion_3-select#1#1 (SELECT[users:[username]]  <<(EQ users.id,0)>>)
     [java]     [PATH CONDITION: (AND true,(NOT (NOT (EQ 0,1))))]
     [java] Dependencies: <empty>
     [java] Original Transaction: voteCreateQuestion
     [java] Microservice: M4
     [java] ----------------------------------------------------------------
     [java] TXN_voteCreateQuestion_4
     [java]  ++ voteCreateQuestion_4-select#1#1 (SELECT[questions:[userId]]  <<(EQ questions.id,0)>>)
     [java]     [PATH CONDITION: (AND (AND (AND true,(NOT (EQ 0,1))),(NOT (NOT (EQ 0,1)))),(NOT (NOT (EQ 0,0))))]
     [java] Dependencies: <empty>
     [java] Original Transaction: voteCreateQuestion
     [java] Microservice: M2
     [java] ----------------------------------------------------------------
     [java] TXN_voteCreateQuestion_5
     [java]  ++ voteCreateQuestion_5-select#1#1 (SELECT[users:[username]]  <<(EQ users.id,(ROW:questions-r31-next1).userId)>>)
     [java]     [PATH CONDITION: (AND (AND (AND true,(NOT (EQ 0,1))),(NOT (NOT (EQ 0,1)))),(NOT (NOT (EQ 0,0))))]
     [java]  ++ voteCreateQuestion_5-update#1#2 (UPDATE[users] {popular=(ROW:users-r13-next1).popular} <<(EQ users.id,(ROW:users-r13-next1).id)>>)
     [java]     [PATH CONDITION: (AND true,(NOT (NOT (EQ 0,1))))]
     [java] Dependencies: <empty>
     [java] Original Transaction: voteCreateQuestion
     [java] Microservice: M4
     [java] ----------------------------------------------------------------
     [java] TXN_voteCreateQuestion_6
     [java]  ++ voteCreateQuestion_6-insert#1#1 (INSERT[votes] [i2_param, , i0_param, i1_param, (ROW:users-r13-next1).id, r2_param])
     [java]     [PATH CONDITION: true]
     [java] Dependencies: <empty>
     [java] Original Transaction: voteCreateQuestion
     [java] Microservice: M5
     [java] ----------------------------------------------------------------
     [java] TXN_ajaxGetSearchResultViaAjax_0
     [java]  ++ ajaxGetSearchResultViaAjax_0-select#1#1 (SELECT[users:[id, username, password, createdAt, status, popular]]  <<(AND (EQ users.username,r1_param),(EQ users.username,r2_param))>>)
     [java]     [PATH CONDITION: (AND (AND true,(NOT (NOT (EQ Abs-REAL#0,0)))),(NOT (NOT (EQ Abs-REAL#1,0))))]
     [java]  ++ ajaxGetSearchResultViaAjax_0-select#2#2 (SELECT[users:[id, username, password, createdAt, status, popular]]  <<(EQ users.username,r1_param)>>)
     [java]     [PATH CONDITION: (AND (AND (AND true,(NOT (EQ Abs-REAL#0,0))),(NOT (EQ Abs-REAL#1,0))),(NOT (NOT (EQ Abs-REAL#2,0))))]
     [java]  ++ ajaxGetSearchResultViaAjax_0-select#3#3 (SELECT[users:[id, username, password, createdAt, status, popular]]  <<(EQ users.username,r2_param)>>)
     [java]     [PATH CONDITION: (AND (AND (AND (AND true,(NOT (EQ Abs-REAL#0,0))),(NOT (EQ Abs-REAL#1,0))),(NOT (EQ Abs-REAL#2,0))),(NOT (NOT (EQ Abs-REAL#3,0))))]
     [java] Dependencies: <empty>
     [java] Original Transaction: ajaxGetSearchResultViaAjax
     [java] Microservice: M4
     [java] ----------------------------------------------------------------
     [java] ===========================================
     [java] === AR compile time:	283ms
     [java] -------------------------------------------
     [java] +++ Dirty Reads found:		0
     [java] +++ Dirty Writes found:		0
     [java] +++ Lost Updates found:		0
     [java] +++ Lost Updates/Write Skews found:	0
     [java] +++ Non-Repeatable Reads found:	3
     [java] +++ Phantom Reads found:		4
     [java] +++ Read Skews found:		11
     [java] +++ Multi anomalies found:		0
     [java] +++ Extensions found:		40
     [java] -------------------------------------------
     [java] === Total anomalies found:	58
     [java] === Analysis time:		1206718 ms

BUILD SUCCESSFUL
Total time: 20 minutes 9 seconds
